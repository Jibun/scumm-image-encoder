import array
import logging
import os
import StringIO
import unittest
import sie.decoder.c64 as c64

class TestRLEV1Unpack(unittest.TestCase):
    def setUp(self):
        configure_logging()

    def test_rle_real_1(self):
        data = "\x03\x0F\x16\x15\xE0\xC1\xA2\x82"
        source = StringIO.StringIO(data)
        # This is for object 106 in room 1 of zak. width = 3, height = 1, times 3 because objects include colours
        #  and mask data.
        size = 3 * 1 * 3
        expected = array.array('B', [21, 22, 22, 15, 15, 15, 3, 3, 3])
        result = c64.decodeC64Gfx(source, size)
        logging.debug(result)
        self.assertEqual(size, len(result))
        self.assertEqual(expected, result)

    def test_rle_real_2(self):
        # Mask char map from room 1 of zak
        data = "\x00\xFF\x3F\x55\x87\xE7\x47\xAA\xA7\x47\xF0\x40\x03\x86\xA0\x86\x01\xFF\x0F\x85\xCB\xA3"
        source = StringIO.StringIO(data)
        size = 0x58 - 8 # minus 8 because ScummVM does this.
        expected = array.array('B', [0, 0, 0, 0, 0, 0, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 170, 170, 170, 170, 170, 170, 170, 170, 255, 255, 255, 255, 255, 255, 255, 255, 240, 240, 240, 240, 240, 240, 240, 240, 3, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 15, 0, 0, 0, 0, 0, 0, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 255, 255, 255, 255])
        result = c64.decodeC64Gfx(source, size)
        logging.debug(result)
        self.assertEqual(size, len(result))
        self.assertEqual(expected, result)

    def test_rle_real_3(self):
        # Mask pic map from room 1 of zak
        data = "\x03\x00\x04\x06\x8A\xA4\x8A\xA4\x8A\xA4\x8A\xA4\x8A\xA4\x8A\x40" + \
                 "\x05\xA3\x8A\xE0\xA3\x8A\xE0\xA3\x8A\xE0\xA3\x8A\xE0\xA3\x8A\xE0" + \
                 "\xA3\x8A\xE0\xA3\x8A\xE0\xA3\x8A\xE0\xA3\x8A\xE0\xA3\x8A\x40\x07" + \
                 "\xA3\x8B\x02\x08\x08\x09\x9F\x9F\x9F\x9F\x9F\x9F\x9F\x9F\x9F\x9F" + \
                 "\x95\xCA\x84\xAA"
        source = StringIO.StringIO(data)
        size = (320 / 8) * (128 / 8)
        expected = array.array('B',
            [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 9, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        )
        result = c64.decodeC64Gfx(source, size)
        logging.debug(result)
        self.assertEqual(size, len(result))
        self.assertEqual(expected, result)

    def test_rle_debug_encoded_1(self):
        # Debugging stuff I've encoded. This is OI 85 from room 1.
        data = ("\x01\x04\x05\x00\x07\x02\x09\xBB\xBC\xBD\xBE\xBF\xC0\x47\x3B\x08\x03\x0A\xC1\xC2\xC3\xC4"
                "\xC5\x11\xC6\xC5\x08\x4D\x04\x0B\xC7\xC8\xC9\x05\xCA\xCB\x41\xCC\x01\xCD\xCE\x41\xCD\x01"
                "\x05\x4E\xC3\x04\x22\x05\x31\xCF\x3D\xC1\x40\x3D\xC1\x01\x48\x4F\xC3\x03\x22\x05\x31\x39"
                "\xC5\x01\x49\x50\xC3\x02\x22\x05\x31\x47\x3A\x01\x51\x00\xA3\x82\x47\x02\xA2\x01\x00\x04"
                "\x81\xE0\xAB\x82\xA8\x85\xE0\xA8\x85\xE0\xA8\x85\xF9\x8E\xA0\x9F\x9F\x81")

        source = StringIO.StringIO(data)
        size = (128 / 8) * (48 / 8) * 3
        expected = array.array('B', [2, 9, 187, 188, 189, 190, 191, 192, 59, 59, 59, 59, 59, 59, 59, 59, 3, 10, 193, 194, 195, 196, 197, 17, 198, 5, 5, 5, 5, 5, 5, 77, 4, 11, 199, 200, 201, 5, 202, 203, 204, 204, 205, 206, 205, 205, 5, 78, 5, 5, 5, 5, 34, 5, 49, 207, 61, 5, 5, 61, 5, 5, 72, 79, 5, 5, 5, 5, 34, 5, 49, 57, 5, 5, 5, 5, 5, 5, 73, 80, 5, 5, 5, 5, 34, 5, 49, 58, 58, 58, 58, 58, 58, 58, 58, 81, 0, 4, 4, 4, 4, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 0, 4, 1, 1, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
        result = c64.decodeC64Gfx(source, size)
        logging.debug(result)
        self.assertEqual(size, len(result))
        self.assertEqual(expected, result)

class TestObjectDecode(unittest.TestCase):
    def test_object_decode_1(self):
        objectMap = [0x00, 0x05]
        charMap = [
            0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88
        ]
        colours = [0x0A, 0xBE, 0x69, 0x13]
        width = 8
        height = 8

        expected = array.array('B',
                    [10, 10, 190, 190, 10, 10, 190, 190,
                    10, 10, 105, 105, 10, 10, 105, 105,
                    10, 10, 5, 5, 10, 10, 5, 5,
                    190, 190, 10, 10, 190, 190, 10, 10,
                    190, 190, 190, 190, 190, 190, 190, 190,
                    190, 190, 105, 105, 190, 190, 105, 105,
                    190, 190, 5, 5, 190, 190, 5, 5,
                    105, 105, 10, 10, 105, 105, 10, 10])
        result = c64.unpackV1Object(objectMap, charMap, colours, width, height)
        self.assertEqual(expected, result)

    def test_object_decode_2(self):
        objectMap = [0x00, 0x01, 0x02, 0x03,
                     0x05, 0x06, 0x07, 0x08] # colours
        charMap = [
            0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88,
            0xFF, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88,
            0x22, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88,
            0xEE, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88
        ]
        colours = [0x0A, 0xBE, 0x69, 0x13]
        width = 16
        height = 16

        # I didn't work this out manually, I just tried decoding and put the result here...
        expected = array.array('B',
                    [10,10,190,190,10,10,190,190,
                    6,6,6,6,6,6,6,6,
                    10,10,105,105,10,10,105,105,
                    10,10,105,105,10,10,105,105,
                    10,10,5,5,10,10,5,5,
                    10,10,6,6,10,10,6,6,
                    190,190,10,10,190,190,10,10,
                    190,190,10,10,190,190,10,10,

                    190,190,190,190,190,190,190,190,
                    190,190,190,190,190,190,190,190,
                    190,190,105,105,190,190,105,105,
                    190,190,105,105,190,190,105,105,
                    190,190,5,5,190,190,5,5,
                    190,190,6,6,190,190,6,6,
                    105,105,10,10,105,105,10,10,
                    105,105,10,10,105,105,10,10,

                    10,10,105,105,10,10,105,105,
                    0,0,105,105,0,0,105,105,
                    10,10,105,105,10,10,105,105,
                    10,10,105,105,10,10,105,105,
                    10,10,7,7,10,10,7,7,
                    10,10,0,0,10,10,0,0,
                    190,190,10,10,190,190,10,10,
                    190,190,10,10,190,190,10,10,
                    
                    190,190,190,190,190,190,190,190,
                    190,190,190,190,190,190,190,190,
                    190,190,105,105,190,190,105,105,
                    190,190,105,105,190,190,105,105,
                    190,190,7,7,190,190,7,7,
                    190,190,0,0,190,190,0,0,
                    105,105,10,10,105,105,10,10,
                    105,105,10,10,105,105,10,10]
        )
        result = c64.unpackV1Object(objectMap, charMap, colours, width, height)
        print result
        self.assertEqual(expected, result)

    def test_object_decode_3(self):
        objectMap = [0x00, 0x01, 0x05, 0x05]
        charMap = [0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88,
                   0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11]
        colours = [0x0A, 0xBE, 0x69, 0x13]
        width = 16
        height = 8

        expected = array.array('B',
                    [10, 10, 190, 190, 10, 10, 190, 190,     105, 105, 10, 10, 105, 105, 10, 10,
                    10, 10, 105, 105, 10, 10, 105, 105,      190, 190, 5, 5, 190, 190, 5, 5,
                    10, 10, 5, 5, 10, 10, 5, 5,              190, 190, 105, 105, 190, 190, 105, 105,
                    190, 190, 10, 10, 190, 190, 10, 10,      190, 190, 190, 190, 190, 190, 190, 190,
                    190, 190, 190, 190, 190, 190, 190, 190,  190, 190, 10, 10, 190, 190, 10, 10,
                    190, 190, 105, 105, 190, 190, 105, 105,  10, 10, 5, 5, 10, 10, 5, 5,
                    190, 190, 5, 5, 190, 190, 5, 5,          10, 10, 105, 105, 10, 10, 105, 105,
                    105, 105, 10, 10, 105, 105, 10, 10,      10, 10, 190, 190, 10, 10, 190, 190
        ])
        result = c64.unpackV1Object(objectMap, charMap, colours, width, height)
        self.assertEqual(expected, result)


    def test_object_decode_real_1(self):
        # NOTE: 3, 3, 3 is the mask, and not used in decoding the normal object gfx.
        #objectMap = [21, 22, 22, 15, 15, 15, 3, 3, 3]
        objectMap = [21, 22, 22, 15, 15, 15]
        charMap = [
            0xFF, 0xF5, 0x55, 0x5A, 0xAA, 0xA0, 0x00, 0x0E, 0xE7, 0x7A, 0xA7, 0x7C, 0xC7, 0x78, 0x87, 0x70, 0x01, 0x1A, 0xA9, 0x9F, 0xFE, 0xE8, 0x85, 0x50, 0x03, 0x35, 0x55, 0x59, 0x95, 0x5A, 0xA9, 0x9F, 0xFE, 0xE8, 0x83, 0x3A, 0xA2, 0x20, 0x01, 0x19, 0x95, 0x5E, 0xEA, 0xA8, 0x82, 0x2A, 0xA4, 0x40, 0x02, 0x2A, 0xA5, 0x5F, 0xFA, 0xAF, 0xFF, 0xFA, 0xA5, 0x50, 0x01, 0x10, 0x00, 0x0A, 0xAA, 0xAA, 0xA4, 0x40, 0x02, 0x25, 0x5A, 0xA0, 0x0F, 0xF8, 0x8F, 0xFA, 0xA2, 0x20, 0x02, 0x25, 0x56, 0x66, 0x6B, 0xBB, 0xBF, 0xF8, 0x81, 0x1A, 0xA1, 0x10, 0x01, 0x15, 0x5A, 0xAA, 0xAF, 0xF8, 0x83, 0x30, 0x01, 0x15, 0x5A, 0xAA, 0xAF, 0xF8, 0x85, 0x54, 0x47, 0x7A, 0xA9, 0x90, 0x02, 0x25, 0x55, 0x5D, 0xD4, 0x4D, 0xD4, 0x44, 0x44, 0x4C, 0xCC, 0xC8, 0x86, 0x64, 0x40, 0x0F, 0xFC, 0xC8, 0x81, 0x10, 0x05, 0x53, 0x33, 0x33, 0x33, 0x30, 0x03, 0x3C, 0xCF, 0xF1, 0x13, 0x35, 0x54, 0x44, 0x47, 0x7E, 0xE8, 0x80, 0x04, 0x4F, 0xFF, 0xFF, 0xF0, 0x0C, 0xC0, 0x00, 0x03, 0x30, 0x03, 0x38, 0x83, 0x3E, 0xE1, 0x18, 0x85, 0x50, 0x03, 0x33, 0x3F, 0xF0, 0x0F, 0xF0, 0x03, 0x30, 0x03, 0x38, 0x82, 0x2C, 0xC3, 0x34, 0x43, 0x38, 0x85, 0x5C, 0xC3, 0x3A, 0xA3, 0x34, 0x47, 0x75, 0x5A, 0xA4, 0x47, 0x7F, 0xF9, 0x90, 0x08, 0x80, 0x00, 0x0F, 0xF7, 0x7F, 0xF7, 0x7C, 0xC4, 0x4D, 0xD5, 0x5C, 0xC4, 0x4D, 0xD1, 0x17, 0x7D, 0xD0, 0x00, 0x08, 0x86, 0x60, 0x02, 0x20, 0x00, 0x0D, 0xDF, 0xFD, 0xDF, 0xF4, 0x43, 0x35, 0x57, 0x74, 0x40, 0x07, 0x7D, 0xD8, 0x81, 0x1C, 0xC0, 0x0A, 0xA4, 0x48, 0x82, 0x2C, 0xC0, 0x0A, 0xA3, 0x38, 0x83, 0x3C, 0xC0, 0x0A, 0xA2, 0x28, 0x84, 0x4C, 0xC0, 0x0A, 0xA1, 0x10
        ]
        colours = [0x00, 0x08, 0x09, 0x06]
        width = 3 * 8
        height = 8
        expected = array.array('B', [0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 7, 7, 7, 7, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 7, 7, 8, 8, 0, 0, 0, 0, 7, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 8, 8, 0, 0, 0, 0, 7, 7, 8, 8, 0, 0, 0, 0, 7, 7, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 7, 7, 9, 9, 0, 0, 0, 0, 7, 7, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 9, 9, 0, 0, 8, 8, 8, 8, 9, 9, 0, 0, 8, 8, 8, 8, 0, 0, 7, 7, 9, 9, 0, 0, 8, 8, 8, 8, 7, 7, 0, 0, 8, 8, 8, 8, 7, 7, 0, 0, 9, 9, 0, 0, 0, 0, 9, 9, 7, 7, 0, 0, 0, 0, 7, 7, 7, 7, 0, 0, 0, 0, 7, 7, 0, 0, 9, 9, 7, 7, 0, 0, 0, 0, 7, 7, 9, 9, 9, 9, 0, 0, 7, 7, 9, 9, 9, 9])

        result = c64.unpackV1Object(objectMap, charMap, colours, width, height)
        print result
        self.assertEqual(width * height, len(result))
        self.assertEqual(expected, result)

class TestBackgroundMaskDecode(unittest.TestCase):
    def test_background_mask_decode_real_1(self):
        maskPicMap = array.array('B',
            [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 9, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        )
        maskCharMap = array.array('B',
            [0, 0, 0, 0, 0, 0, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 170, 170, 170, 170, 170, 170, 170, 170, 255, 255, 255, 255, 255, 255, 255, 255, 240, 240, 240, 240, 240, 240, 240, 240, 3, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255, 15, 0, 0, 0, 0, 0, 0, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 255, 255, 255, 255]
        )
        width = 320
        height = 128
        # Had to externalise this since having this data inline made my IDE slow to a crawl!
        expected = read_raw_array(os.path.join('res', 'test_background_mask_decode_real_1.expected'))

        result = c64.unpackV1BackgroundMask(maskPicMap, maskCharMap, width, height)
        self.assertEqual(expected, result)


def configure_logging():
    logging.basicConfig(format="", level=logging.DEBUG)

def read_raw_array(file_path):
    data_array = array.array('B')
    test_data_file = file(file_path, 'rb')
    data_array.fromstring(test_data_file.read())
    test_data_file.close()
    return data_array